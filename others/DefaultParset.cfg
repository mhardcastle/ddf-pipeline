## NB: Changes introduced for issue #255 as of 17/10/2016. See documentation at end of file.

[Data]
_Help			= Visibility data options
MS		        =    # Single MS name, or list of comma-separated MSs, or name of *.txt file listing MSs. #metavar:MS(s) #global:MS
    			       Note that each MS may also be specified as a glob pattern (e.g. *.MS), and may be suffixed with "//Dx" and/or "//Fy"
    			       to select specific DATA_DESC_ID and FIELD_IDs in the MS. "x" and "y" can take the form of a single number, a
    			       Pythonic range (e.g. "0:16"), an inclusive range ("0~15"), or "*" to select all. E.g. "foo.MS//D*//F0:2" selects all
    			       DDIDs, and fields 0 and 1 from foo.MS. If D and/or F is not specified, --Selection-Field and --Selection-DDID
			       is used as the default.
ColName 		= CORRECTED_DATA    # MS column to image #metavar:COLUMN #type:str
ChunkHours		= 0                 # Process data in chunks of <=N hours. Use 0 for no chunking. #type:float #metavar:N
ChunkRows       = 0                 # Process data in chunks of <=N rows, for dask mode. Overrides ChunkHours. 
                                      Use -1 for native dataset chunking (required in zarr mode). #type:int #metavar:N 
Sort            = 0                 # if True, data will be resorted by baseline-time order internally. This usually speeds up processing. #type:bool
Dask            = 0                 # If True, uses dask-ms IO layer instead of casacore #type:bool

[Predict]
ColName 		= None        	    # MS column to write predict to. Can be empty to disable. #metavar:COLUMN #type:str
MaskSquare          	= None              # Use this field if you want to predict (in/out)side a square region. Syntax is (MaskOutSide,NpixInside).
					                        For example setting (0,1000) will predict the outer (1000x1000) square only #metavar:IMAGE
FromImage    	    						= None              # In --Image-Mode=Predict, will predict data from this image, rather than --Data-InitDicoModel #metavar:IMAGE #type:str
InitDicoModel		= None              # Resume deconvolution from given DicoModel #metavar:FILENAME #type:str
Overwrite       	= 1                 # Allow overwriting of predict column #type:bool

[Selection]
_Help = Data selection options
Field                  = 0             # default FIELD_ID to read, if not specified in --Data-MS. #metavar:FIELD #type:int
DDID                   = 0             # default DATA_DESC_ID to read, if not specified in --Data-MS. #metavar:DDID #type:int
TaQL                   =               # additional TaQL selection string #metavar:TaQL #type:str
ChanStart              = 0             # First channel #metavar:N #type:int
ChanEnd                = -1            # Last channel+1, -1 means up and including last channel. #metavar:N #type:int
ChanStep               = 1             # Channel stepping #metavar:N #type:int
FlagAnts	       =               # List of antennas to be flagged, e.g. "RS,CS017LBA" #metavar:ANT,...
UVRangeKm  	       = [0, 2000]     # Select baseline range #metavar:KM_MIN,KM_MAX
TimeRange  	       =               # Select time range (two comma separated values) containing UTC start and end times in ISO8601
                                   # format (or formats accepted by casacore.quantas) #metavar:H0,H1
DistMaxToCore	       =               # Select antennas by specifying a maximum distance to core #metavar:KM

[Output]
_Help			= Options for input and output image names
Mode			    = Clean       # What to do. #options:Dirty|Clean|Predict|PSF
Clobber          	= 0           # Allow overwriting of existing parset and images (can't be specified via parset!) #type:bool #cmdline_only:1
Name		     	= image       # Base name of output images #metavar:BASENAME #type:str
ShiftFacetsFile		= None	      # Astrometric correction per facet, when Image-Mode=RestoreAndShift
RestoringBeam   	= None
Also                    =                   # Save also these images (i.e. adds to the default set of --Output-Images) #metavar:CODES #type:str
Cubes   		=                   # Also save cube versions for these images (only MmRrIi codes recognized) #metavar:CODES #type:str
Images           	= DdPAMRIikemz      # Combination of letter codes indicating what images to save.

    Uppercase for intrinsic flux scale [D]irty, [M]odel, [C]onvolved model, [R]esiduals, restored [I]mage;
    Lowercase for apparent flux scale  [d]irty, [m]odel, [c]onvolved model, [r]esiduals, restored [i]mage;
    Other images: [P]SF,
    [N]orm, [n]orm facets,
    [S] flux scale,
    [A]lpha (spectral index),
    [X] mixed-scale (intrinsic model, apparent residuals, i.e. Cyrils original output),
    [o] intermediate mOdels (Model_i),
    [e] intermediate rEsiduals (Residual_i),
    [k] intermediate masK image,
    [z] intermediate auto mask-related noiZe image,
    [g] intermediate dirty images (only if [Debugging] SaveIntermediateDirtyImages is enabled).
    [F] intrinsic MFS restored image
    [f] apparent MFS restored image
    Use "all" to save all.
    #type:str #metavar:CODES
# Open      		 =                   # Automatically open these images with viewer when done. #metavar:CODES #type:str
# DefaultImageViewer = xdg-open       # Default path to image viewer. #metavar:PATH #type:str
StokesResidues = I # After cleaning Stokes I, output specified residues if [r] or [R] is specified in option Output-Images. Note that the imager
    does not perform deconvolution on any Stokes products other than I - it
    only outputs residues.
    #options:I|IQ|IV|QU|IQUV

[SPIMaps]
AlphaThreshold   = 15  # Multiple of the RMS in final residual which determines threshold for fitting alpha map. #metavar:N #type:int

[Image]
_Help = General imager settings
## Mode			        = Clean        # Deprecated and replaced by --Output-Mode.
NPix			        = 5000         # Image size. #type:int #metavar:NPIX
Cell			        = 5.           # Cell size. #type:float #metavar:ARCSEC
PhaseCenterRADEC 	    	= align         # Use non-default phase centre. If "align" is used, all MSs will be
    rephased to the phase centre of the first MS. Otherwise, specify [HH:MM:SS,DD:MM:SS] direction.
    If empty, no rephasing is done. #metavar:RA,DEC
SidelobeSearchWindow    	= 200          # Size of PSF subwindow (centred around the main lobe) to search for the highest sidelobe
    when fitting the PSF size. #metavar:NPIX #type:int

[Facets]
_Help = Spacial tessellation settings
NFacets			= 3            # Number of facets to use. #type:int #metavar:N
CatNodes		= None
DiamMax     		= 180          # Max facet size, for tessellations. Larger facets will be broken up. #type:float #metavar:DEG
DiamMin        		= 0            # Min facet size, for tessellations. Smaller facets will be merged. #type:float #metavar:DEG
MixingWidth		= 10 	       # Sigma of the gaussian (in pixels) being used to mix the facets on their edges
PSFOversize     	= 1            # For cleaning, use oversize PSF relative to size of facet. #type:float #metavar:X
PSFFacets       	= 0            # Number of PSF facets to make. 0: same as NFacets (one PSF per facet) 1: one PSF for entire field. #type:int #metavar:N
Padding			= 1.7          # Facet padding factor. #type:float #metavar:FACTOR
Circumcision    	= 0            # Set to non-0 to override NPixMin computation in FacetsToIm(). Debugging option, really. #metavar:N
FluxPaddingAppModel	= None	       # For flux-dependent facet-padding, the apparant model image (or cube)
FluxPaddingScale	= 2.	       # The factor applied to the --Facets-Padding for the facet with the highest flux

[Weight]
_Help = Data and imaging weight settings
ColName		   	= WEIGHT_SPECTRUM   # Read data weights from specified column. Use WEIGHT_SPECTRUM or WEIGHT, more rarely IMAGING_WEIGHT. You can also specify a list of columns like using --Weight-ColName=[WEIGHT_SPECTRUM,IMAGING_WEIGHT] #metavar:COLUMN
Mode		 	= Briggs            # Image weighting. #options:Natural|Uniform|Robust|Briggs
MFS     	    	= 1                 # If True, MFS uniform/Briggs weighting is used (all channels binned onto one uv grid). If 0, binning is per-band. #type:bool
Robust			= 0                 # Briggs robustness parameter, from -2 to 2. #metavar:R #type:float
SuperUniform    	= 1                 # Super/subuniform weighting: FoV for weighting purposes is taken as X*Image_Size #type:float #metavar:X
OutColName    		= None              # Save the internally computed weights into this column #type:str #metavar:COLUMN
EnableSigmoidTaper  = 0                     # Toggles sigmoid tapering type:bool
SigmoidTaperInnerCutoff = 0.0               # Inner taper cutoff in uvwavelengths type:float
SigmoidTaperOuterCutoff = 0.0               # Outer taper cutoff in uvwavelengths type:float
SigmoidTaperInnerRolloffStrength = 0.5       # Rolloff strength on inner taper if enabled. 1.0 is essentially a boxcar, 0.0 means very long rolloffs type:float
SigmoidTaperOuterRolloffStrength = 0.5       # Rolloff strength on outer taper if enabled. 1.0 is essentially a boxcar, 0.0 means very long rolloffs type:float


[RIME]
_Help = Low level parameters related to the forward and backward image to visibility spaces transforms
Precision		 = S            # Single or double precision gridding. DEPRECATED? #options:S|D
PolMode			 = I            # Polarization mode. #options:I|IQ|IU|IV|IQU|IQUV
FFTMachine		 = FFTW
ForwardMode      	 = BDA-degrid   # Forward predict mode. #options:BDA-degrid|Classic|Montblanc
BackwardMode     	 = BDA-grid   	# Backward mode. #options:BDA-grid|Classic
DecorrMode		 =              # decorrelation mode
DecorrLocation   	 = Edge         # where decorrelation is estimated #options:Center|Edge

[CF]
_Help = Imager convolution function settings
OverS       = 11                # Oversampling factor. #type:int #metavar:N
Support	    = 7                 # CF support size. #type:int #metavar:N
Nw			= 100               # Number of w-planes. Setting this to 1 enables AIPS style faceting. #type:int #metavar:PLANES
wmax	    = 0                 # Maximum w coordinate. Visibilities with larger w will not be gridded. If 0,
    no maximum is imposed. #type:float #metavar:METERS

[Comp]
_Help = Compression settings (baseline-dependent averaging [BDA] and sparsification)
GridDecorr	    = 0.02      # Maximum BDA decorrelation factor (gridding) #type:float #metavar:X
GridFoV		    = Facet     # FoV over which decorrelation factor is computed (gridding) #options:Full|Facet
DegridDecorr    = 0.02      # Maximum BDA decorrelation factor (degridding) #type:float #metavar:X
DegridFoV	    = Facet     # FoV over which decorrelation factor is computed (degridding) #options:Full|Facet
Sparsification  = 0         # apply sparsification compression to initial major cycles. Sparsification refers
    to throwing away random visibilities. Supply a list of factors: e.g. 100,30,10 would mean only 1/100 of the data
    is used for the first major cycle, 1/30 for the second, 1/10 for the third, and full data for the fourth cycle
    onwards. This can substantially accelerate deconvolution of deep observations, since, in these regimes, very little
    sensitivity is required for model construction in the initial cycles. #metavar:N1,N2,...
BDAMode         = 1         # BDA block computation mode. 1 for Cyril's old mode, 2 for Oleg's new mode. 2 is faster
    but see issue #319. #options:1|2 #metavar:MODE
BDAJones        = 0         # If disabled, gridders and degridders will apply a Jones terms per visibility.
    If 'grid', gridder will apply them per BDA block, if 'both' so will the degridder. This is faster but possibly less
    accurate, if you have rapidly evolving Jones terms.

[Parallel]
_Help			= Parallelization options
NCPU			= 0    # Number of CPUs to use in parallel mode. 0: use all available. 1: disable parallelism. #metavar:N #type:int
Affinity        = 1    # pin processes to cores.
 -1/1/2 determines stepping used in selecting cores.
 Alternatively specifies a list of length NCPU.
 Alternatively "disable" to disable affinity settings
 Alternatively "enable_ht" uses stepping of 1 (equivalent to Parallel.Affinity=1), will use all vthreads - the obvious exception is if HT is disabled at BIOS level
 Alternatively "disable_ht" autodetects the NUMA layout of the chip for Debian-based systems and dont use both vthreads per core
 Use 1 if unsure.
MainProcessAffinity  = 0 # this should be set to a core that is not used by forked processes, this option is ignored when using option "disable or disable_ht" for Parallel.Affinity
MotherNode	     = localhost

[Cache]
_Help                   = Cache management options
Reset                   = 0         	   # Reset all caches (including PSF and dirty image) #type:bool
SmoothBeam		= auto         	   # Reset cached smmoth beam #options:reset|auto|force
Weight			= auto         	   # Reset cached smmoth beam #options:reset|auto
PSF                     = auto      	   # Cache PSF data. #options:off|reset|auto|force
Dirty                   = auto      	   # Cache dirty image data. #options:off|reset|auto|forcedirty|forceresidual
VisData                 = auto      	   # Cache visibility data and flags at runtime. #options:off|auto|force
LastResidual	        = 1         	   # Cache last residual data (at end of last minor cycle) #type:bool
Dir                     =           	   # Directory to store caches in. Default is to keep cache next to the MS, but
					       this can cause performance issues with e.g. NFS volumes. If you have fast local storage, point to it. %metavar:DIR
DirWisdomFFTW	   	= ~/.fftw_wisdom   # Directory in which to store the FFTW wisdom files
ResetWisdom		= 0 		   # Reset Wisdom file #type:bool
CF  			= 1                # Cache convolution functions. With many CPUs, may be faster to recompute. #type:bool
HMP                     = 0                # Cache HMP basis functions. With many CPUs, may be faster to recompute. #type:bool

[Beam]
_Help			= Apply E-Jones (beam) during imaging
Model		    	= None      # Beam model to use. #options:None|LOFAR|FITS|GMRT|ATCA
At			= facet	    # when DDESolutions are enabled, compute
                                      beam per facet, or per larger solution tessel #options:facet|tessel
LOFARBeamMode	    	= AE        # LOFAR beam mode. #options:A|AE
NBand               	= 0         # Number of channels over which same beam value is used. 0 means use every channel. #metavar:N #type:int
CenterNorm		= False	    # Normalize beam so that its amplitude at the centre is 1. #type:bool
Smooth  		= False	    # Compute the interpolated smooth beam
SmoothNPix		= 11	    # Number of pixels the beam is evaluated and smoothed #type:int
SmoothInterpMode	= Linear    # Linear/Log
FITSFile            	= beam_$(corr)_$(reim).fits # Beam FITS file pattern. A beam pattern consists of eight FITS files, i.e. a real and imaginary
  part for each of the four Jones terms. The following substitutions are performed to form up the eight filenames:
  $(corr) or $(xy) is replaced by the Jones element label (e.g. "xx" or "rr"), $(reim) is replaced by "re" or "im", $(realimag)
  is replaced by "real" or "imag". Uppercase variables are replaced by uppercase values, e.g. $(REIM) by "RE" pr "IM".
  Use "unity" if you want to apply a unity matrix for the E term (e.g. only want to do visibility derotations).
  Correlation labels (XY or RL) are determined by reading the MS, but may be overridden by the FITSFeed option.
  To use a heterogeneous mix of beams you have to first type specialize the antennas using a json configuration of
  the following format:
  {'lband': {
        'patterns': {
            'cmd::default': ['$(stype)_$(corr)_$(reim).fits',...],
        },
        'define-stationtypes': {
            'cmd::default': 'meerkat',
                'ska000': 'ska'
        } 
    },
    ...
  }
  This will substitute 'meerkat' for all antennas but ska000, with 'meerkat_$(corr)_$(reim).fits'
  whereas beams for ska000 will be loaded from 'ska_$(corr)_$(reim).fits' in this example.
  The station name may be specified as regex by adding a '~' infront of the pattern to match, e.g
  '~ska[0-9]{3}': 'ska' will assgign all the 'ska' type to all matching names such as ska000, ska001, ..., skaNNN.
  Each station type in the pattern section may specify a list of patterns for different frequency ranges.
  Multiple keyed dictionaries such as this may be specified within one file. They will be treated as chained
  configurations, adding more patterns and station-types to the first such block.
  Warning: Once a station is type-specialized the type applies to **ALL** chained blocks!
  Blocks from more than one config file can be loaded by comma separation, e.g.
  '--Beam-FITSFile conf1.json,conf2.json,...', however no block may define multiple types for any station.
  If patterns for a particular station type already exists more patterns are just appended to the existing list.
  Warning: where multiple patterns specify the same frequency range the first such pattern closest to the MS
  SPW frequency coverage will be loaded.
  If no configuration file is provided the pattern may not contain $(stype) -- station independence is assumed.
  This is the same as specifing the following config:
  {'lband': {
      'patterns': {
          'cmd::default': ['$(corr)_$(reim).fits',...],
      },
      'define-stationtypes': {
          'cmd::default': 'cmd::default'
      }
  }
  #metavar:PATTERN
FITSFeed		= None   # If set, overrides correlation labels given by the measurement set. #options:None|xy|XY|rl|RL
FITSFeedSwap		= False	 # swap feed patterns (X to Y and R to L) #type:bool
DtBeamMin           	= 5      # change in minutes on which the beam is re-evaluated  #metavar:MIN #type:float
FITSParAngleIncDeg  	= 5      # increment in PA in degrees at which the beam is to be re-evaluated (on top of DtBeamMin)  #metavar:DEG #type:float
FITSLAxis           	= -X     # L axis of FITS file. Minus sign indicates reverse coordinate convention. #metavar:AXIS #type:str
FITSMAxis           	= Y      # M axis of FITS file. Minus sign indicates reverse coordinate convention. #metavar:AXIS #type:str
FITSVerbosity       	= 0      # set to >0 to have verbose output from FITS interpolator classes. #metavar:LEVEL #type:int
FITSFrame               = altaz  # coordinate frame for FITS beams. Currently, alt-az, equatorial and zenith mounts are supported.
                                  #options:altaz|altazgeo|equatorial|zenith #metavar:FRAME
FeedAngle               = 0      # offset feed angle to add to parallactic angle #type:float
ApplyPJones             = 0      # derotate visibility data (only when FITS beam is active and also time sampled). If you have equatorial mounts this is not what you should be doing!
FlipVisibilityHands     = 0      # apply anti-diagonal matrix if FITS beam is enabled effectively swapping X and Y or R and L and their respective hands

[Freq]
_Help          = Multifrequency imaging options
BandMHz        = 0  # Gridding cube frequency step. If 0, --Freq-NBand is used instead. #metavar:MHz #type:float
FMinMHz        = 0  # Gridding cube frequency Min. If 0, is ignored. #metavar:MHz #type:float
FMaxMHz        = 0  # Gridding cube frequency Max. If 0, is ignored. #metavar:MHz #type:float
DegridBandMHz  = 0  # Degridding cube frequency step. If 0, --Freq-NDegridBand is used instead. #metavar:MHz #type:float
NBand          = 1  # Number of image bands for gridding. #metavar:N #type:int
NDegridBand    = 0  # Number of image bands for degridding. 0 means degrid each channel. #metavar:N #type:int

[DDESolutions]
_Help           = Apply DDE solutions during imaging (@cyriltasse please document this section)
DDSols			=         # Name of the DDE solution file
SolsDir			= None    # Name of the directry of the DDE Solutions which contains <SolsDir>/<MSNames>/killMS.<SolsName>.sols.npz
GlobalNorm		= None 	  # Option to normalise the Jones matrices (options: MeanAbs, MeanAbsAnt, BLBased or SumBLBased). See code for more detail
JonesNormList		= AP      # Deprecated?
JonesMode		= Full 	  # #options:Scalar|Diag|Full
DDModeGrid		= AP	  # In the gridding step, apply Jones matrices Amplitude (A) or Phase (P) or Amplitude&Phase (AP)
DDModeDeGrid		= AP	  # In the degridding step, apply Jones matrices Amplitude (A) or Phase (P) or Amplitude&Phase (AP)
ScaleAmpGrid 		= 0	  # Deprecated?
ScaleAmpDeGrid 		= 0	  # Deprecated?
CalibErr 		= 10.	  # Deprecated?
Type			= Nearest # Deprecated? #options:Krigging|Nearest
Scale			= 1.      # Deprecated? #metavar:DEG
gamma			= 4.	  # Deprecated?
RestoreSub		= False	  # Deprecated?
ReWeightSNR		= 0.	  # Deprecated?

[PointingSolutions]
_Help           = Apply pointing offsets to beam during DFT predict. Requires Montblanc in --RIME-ForwardMode.
PointingSolsCSV = None            # Filename of CSV containing time-variable pointing solutions. None initializes all antenna pointing offsets to 0, 0
InterpolationMode = LERP          # Interpolation mode #options:LERP

[Deconv]
_Help = Common deconvolution options. Not all of these apply to all deconvolution modes
Mode		        = HMP    # Deconvolution algorithm. #options:HMP|Hogbom|SSD|WSCMS
MaxMajorIter     	= 20     # Max number of major cycles. #type:int #metavar:N
MaxMinorIter    	= 20000  # Max number of (overall) minor cycle iterations (HMP, Hogbom). #type:int #metavar:N
AllowNegative		= 1      # Allow negative components (HMP, Hogbom). #type:bool
Gain			= 0.1    # Loop gain (HMP, Hogbom). #type:float #metavar:GAIN
FluxThreshold 		= 0      # Absolute flux threshold at which deconvolution is stopped  (HMP, Hogbom, SSD). #metavar:Jy #type:float
CycleFactor         	= 0      # Cycle factor: used to set a minor cycle stopping threshold based on PSF sidelobe level  (HMP, Hogbom). Use 0 to disable,
    otherwise 2.5 is a reasonable value, but may lead to very shallow minor cycle. #metavar:X #type:float
RMSFactor               = 0      # Set minor cycle stopping threshold to X*{residual RMS at start of major cycle}  (HMP, Hogbom, SSD). #metavar:X #type:float
PeakFactor          	= 0.15   # Set minor cycle stopping threshold to X*{peak residual at start of major cycle}  (HMP, Hogbom, SSD). #metavar:X #type:float
PrevPeakFactor          = 0      # Set minor cycle stopping threshold to X*{peak residual at end of previous major cycle} (HMP). #metavar:X #type:float
NumRMSSamples       	= 10000  # How many samples to draw for RMS computation. Use 0 to use all pixels (most precise). #metavar:N #type:int
ApproximatePSF      	= 0      # when --Comp-Sparsification is on, use approximate (i.e. central facet) PSF for cleaning while
    			  	   operating above the given sparsification factor (SF). This speeds up HMP reinitialization in major cycles. A value
    				   of 1-10 is sensible. Set to 0 to always use precise per-facet PSF. #metavar:SF
PSFBox              	= auto  # determines the size of the PSF subtraction box used in CLEAN-style deconvolution (if appropriate).
    			  	  Use "auto" (or "sidelobe") for a Clark-CLEAN-style box taken out to a certain sidelobe (faster). Use "full" to subtract
    				  the full PSF, Hogbom-style (more accurate, can also combine with --Image-PSFOversize for maximum accuracy).
    				  Use an integer number to set an explicit box radius, in pixels. (HMP) #metavar:BOX

[Mask]
_Help = Masking options. The logic being Mask_{i+1} = ExternalMask | ResidualMask | Mask_{i}
External		= None     	 # External clean mask image (FITS format).  #metavar:FILENAME
Auto			= False		 # Do automatic masking
SigTh			= 10		 # set Threshold (in sigma) for automatic masking
FluxImageType		= ModelConv	 # If Auto enabled, does the cut of SigTh either on the ModelConv or the Restored

[Noise]
_Help = When using a noise map to HMP or to mask
MinStats		= [60,2]   	 # The parameters to compute the noise-map-based mask for step i+1 from the residual image at step i. Should be [box_size,box_step]
BrutalHMP		= True	 	 # If noise map is computed, this option enabled, it first computes an image plane deconvolution with a high gain value, and compute the noise-map-based mask using the brutal-restored image

[HMP]
_Help = Hybrid Matching Pursuit (aka multiscale/multifrequency) mode deconvolution options
Alpha			= [-1., 1., 11]     # List of alphas to fit. #metavar:MIN,MAX,N
Scales			= [0]       	    # List of scales to use. #metavar:LIST
Ratios			= []    	        # @cyriltasse please document
NTheta			= 6     	        # Number of PA steps to use. #metavar:N
SolverMode      	= PI    	    # Solver mode: pseudoinverse, or non-negative least squares. #options:PI|NNLS
AllowResidIncrease	= 0.1		    # Allow the maximum residual to increase by at most this much relative to
    the lowest residual, before bailing out due to divergence.#metavar:FACTOR
MajorStallThreshold = 0.8       # Major cycle stall threshold. If the residual at the beginning of a major cycle
    is above X*residual at the beginning of the previous major cycle, then we consider the deconvolution stalled
    and bail out. #metavar:X #type:float
Taper           	= 0             # Weighting taper size for HMP fit. If 0, determined automatically. #type:int
Support         	= 0             # Basis function support size. If 0, determined automatically. #type:int
PeakWeightImage     = None          # weigh the peak finding by given image
Kappa               = 0             # Regularization parameter. If stddev of per-alpha solutions exceeds the
    maximum solution amplitude divided by Kappa, forces a fully-regularized solution. Use 0 for no such regularization. #type:float
OuterSpaceTh		= 2.
FractionRandomPeak	= None

[Hogbom]
PolyFitOrder    = 4     # polynomial order for frequency fitting
LinearPeakfinding = Joint # Perform EVPA-preserving (complex-valued) polarization CLEAN (Pratley-Johnston-Hollitt) or separate Q and U cleaning. #options:Joint|Separate

[WSCMS]
NumFreqBasisFuncs       = 4  # number of basis functions to use for the fit to the frequency axis
MultiScale              = True  # whether to use multi-scale or not (recommended to use Hogbom if not using multi-scale)
MultiScaleBias          = 0.55  # scale bias parameter (smaller values give more weight to larger scales)
ScaleBasis              = Gauss  # the kind of scale kernels to use (only Gauss available for now)
Scales                  = None  # Scale sizes in pixels/FWHM eg. [0, 4, 8, 16] (if None determined automatically)
MaxScale                = 250   # The maximum extent of the scale functions in pixels
NSubMinorIter           = 250   # Number of iterations for the sub minor loop
SubMinorPeakFact        = 0.85   # Peak factor of sub minor loop
MinorStallThreshold     = 1e-7  # if the peak in the minor cycle decreases by less than this fraction it has stalled
                                  and we go back to the major cycle
MinorDivergenceFactor   = 1.3   # if the peak flux increases by more than this fraction between minor cycles then
                                  it has diverged and we go back to a major cycle
AutoMask                = True  # whether to use scale dependent auto-masking
AutoMaskThreshold       = None  # Threshold at which the scale dependent mask should be fixed.
                                # If None and and AutoMask is true determined from AutoMaskRMSFactor
AutoMaskRMSFactor       = 3     # Default multiple of RMS at which to start AutoMasking in case no
                                # specific threshold is specified
CacheSize               = 3  # the number of items to keep in the cache dict before spilling over to disk
Padding                 = 1.2  # padding in the minor cycle. Can often be much smaller than facet padding

[Montblanc]
_Help = Montblanc settings (for --Image-PredictMode=Montblanc)
TensorflowServerTarget =         # URL for the TensorflowServer, e.g. grpc://tensorflow.server.com:8888/ #type:str #metavar:URL
LogFile          = None         # None to dump as Output-Name.montblanc.log, otherwise user-specified filename #metavar:FILENAME
MemoryBudget     = 4.0          # Predictor memory budget in GiB #type:float
LogLevel         = WARNING      # Log level to write to console, rest of the messages goes to log file #type:str #options:NOTSET|DEBUG|INFO|WARNING|ERROR|CRITICAL
SolverDType      = double        # Data type used in solver, #type:str #options:single|double
DriverVersion    = tf            # Backend to use, #type:str #options:tf

[SSDClean]
_Help = SSD deconvolution mode settings
Parallel                = True   # Enable parallel mode. #type:bool
IslandDeconvMode        = GA # Moresane, GA, Sasir, ...
SSDSolvePars		= [S,Alpha]
SSDCostFunc		= [Chi2,MinFlux]
BICFactor		= 0.
ArtifactRobust		= False
ConvFFTSwitch		= 1000
NEnlargePars		= 0
NEnlargeData		= 2
RestoreMetroSwitch	= 0
MinMaxGroupDistance 	= [10,50]
MaxIslandSize		= 0
InitType		= HMP

[SSD2]
_Help = SSD2 deconvolution mode settings
PolyFreqOrder  		= 2 # Add Polyi to --SSDClean-SSDSolvePars.
SolvePars		= [Poly] 
InitType		= [HMP,MultiSlice:Orieux]
NLastCyclesDeconvAll	= 1 # This parameter sets how many of the last cycles will deconvolve all islands. If set to 0, SSD2 will use --Deconv-CycleFactor, --Deconv-PeakFactor, --Deconv-RMSFactor to determine threshold above which islands are reestimated. If set to 2, in the last 2 major cycle all islands are estimated. If -1: Always deconv all islands regardless of the cycle number

[MultiSliceDeconv]
Type			= MORESANE # MORESANE, Orieux, etc
PolyFitOrder		= 2

[GAClean]
NSourceKin		= 50
NMaxGen			= 50
MinSizeInit		= 10
AlphaInitHMP		= [-4., 1., 6]
ScalesInitHMP		= [0,1,2,4,8,16,24,32]
GainInitHMP		= 0.1
RatiosInitHMP           = []
NThetaInitHMP           = 4
MaxMinorIterInitHMP	= 10000
AllowNegativeInitHMP	= False
RMSFactorInitHMP	= 3.
ParallelInitHMP		= True  # run island init in parallel. Serial mode may reduce RAM pressure, and could be useful for debugging. #type:bool
NCPU                    = 0     # number of cores to use for parallel fitness calculations (in large-island mode). Default of 0 means
                                use as many as specified by --Parallel-NCPU. If you find yourself running out of memory here, you
                                might want to specify a small number of cores for this step. #type:int


[MORESANE]
_Help = PyMoresane internal options
NMajorIter		= 200    # Maximum number of iterations allowed in the major loop. Exit condition.
NMinorIter		= 200    # Maximum number of iterations allowed in the minor loop. Serves as an exit condition when the SNR is does not reach a maximum.
Gain			= 0.1    # Loop gain for the deconvolution.
ForcePositive		= True	 # Boolean specifier for whether or not a model must be strictly positive.
SigmaCutLevel		= 1	 # Number of sigma at which thresholding is to be performed.

[Log]
_Help = Options related to logging
Memory 			= 0      # log memory use #type:bool
Boring 			= 0      # disable progress bars and other pretty console output #type:bool
Append 			= 0      # append to log file if it exists (default truncates) #type:bool

[Debug]
_Help = Debugging options for the discerning masochist
PauseWorkers  	     = 0         # Pauses worker processes upon launch (with SIGSTOP). Useful to attach gdb to workers. #type:bool
FacetPhaseShift 	 = [0., 0.]  # Shift in facet coordinates in arcseconds for l and m (this phase steers the sky over the image plane). #metavar:L,M
PrintMinorCycleRMS 	 = 0         # Compute and print RMS in minor cycle iterations. #type:bool
DumpCleanSolutions 	 = 0         # Dump intermediate minor cycle solutions to a file. Use 0 or 1, or give an explicit list of things to dump
DumpCleanPostageStamps =         # Also dump postage stamps when cleaning within a radius R of X,Y. Implies --Debug-DumpCleanSolutions. #metavar:X,Y,R
CleanStallThreshold  = 0     # Throw an exception when a fitted CLEAN component is below this threshold in flux. Useful for debugging. #type:float
MemoryGreedy 		 = 1         # Enable memory-greedy mode. Retain certain shared arrays in RAM as long as possible. #type:bool
APPVerbose 		     = 0         # Verbosity level for multiprocessing. #type:int
Pdb                  = auto      # Invoke pdb on unexpected error conditions (rather than exit). #options:never|always|auto
    If set to 'auto', then invoke pdb only if --Log-Boring is 0.

[Misc]
_Help            = Miscellaneous options
RandomSeed       = None         # seed random number generator with explicit seed, if given. Useful for reproducibility
		   		  of the random-based optimizations (sparsification, etc.). #metavar:N
ParsetVersion    = 0.2          # parset version number, for migration purposes. Can't be specified on command line. #no_cmdline:1
ConserveMemory   = 0            # if true, tries to minimize memory use at possible expense of runtime.
IgnoreDeprecationMarking = 0    # if true, tries to run deprecated modes. #type:bool
        Currently this means that deconvolution machines are reset and reinitialized each major cycle. #type:bool


## NB: Changes introduced for issue #255:
##
##
##  * ``DefaultParset.cfg`` now contains comment clauses which are auto-parsed into documentation by ``ReadCfg.py``, and
##  automatically converted into OptionParser command-line arguments.
##
##  * Command-line arguments are formed as ``--Section-OptionName``.
##
##  * Each section can contain a ``_Help = section description`` option. This is turned into a docstring for the section.
##
##  * Each option line can contain a comment, preceded by "#". This is turned into a docstring for the option. Note that
##  long comments can be continued on the next line simply by indenting the next line.
##
##  * Option comments can have embedded attributes of the form ``#attr:value``. These are removed from the docstring
##  automatically. All attributes are optional! A few attributes have special meaning, as per below.
##
##  * ``#type:TYPE`` forces the option to be interpreted as a specific Python type. E.g. ``#type:bool``, ``#type:str``,
##  ``#type:float``. In the absence of an explicit type attribute, the option will be parsed into a valid Python value
##  (using ``eval()``), and converted into a string if that fails. This means that e.g. "None" will be interpreted as
##  ``None`` and not the string ``"None"``. Note that this mechanism has some pitfalls: for example "all" gets parsed
##  into the built-in ``all()`` function (unless surrounded by quotes), so if you want to make sure an option is treated
##  as a string, make sure you add a ``#type:str`` attribute.
##
##  * ``#options:A|B|C`` specifies that the option is a "selector" with a fixed set of values. See, for example,
##  ``#options:None|LOFAR|FITS`` in BeamModel.
##
##  * ``#metavar:VAR`` is passed to the metavar argument of ``OptionParser.add_option()``. This makes for a nicer-looking
##   command-line help. E.g. ``#metavar:MHz``.
##
##  * ``#cmdline-only:1`` specifies that the option can only be changed from the command-line, not via a parset.
##
##  * Options can have aliases. *NB: I'm not convinced about this feature. Maybe it makes things too confusing and should
##   be removed.* For example,
##
##  ```
##  [Caching]
##  PSF|CachePSF            = 1         # Cache PSF data. May be expensive with large images, hence optional #type:bool
##  ```
##
##  means that the command-line option can be specified as ``--Caching-PSF`` or ``--CachePSF``. The second form is the
##  "global alias". The GD object in DDFacet will contain both ``GD["Caching"]["PSF"]`` and
##  ``GD["Caching"]["CachePSF"]``, set to the same value.
